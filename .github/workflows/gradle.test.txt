name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        run: |
          docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache --push -t ${{ secrets.DOCKER_USERNAME }}/employee-management-backend:latest -f backend/Dockerfile .
          docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache --push -t ${{ secrets.DOCKER_USERNAME }}/employee-management-frontend:latest -f frontend/Dockerfile .

      - name: Deploy to AWS ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          service: ecs-service
          cluster: ecs-cluster
          wait-for-service-stability: true


# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#     tags:
#       - "*"

# jobs:
#   gradle-build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up JDK 21
#         uses: actions/setup-java@v2
#         with:
#           java-version: "21"
#           distribution: "adopt"

#       - name: Cache Gradle packages
#         uses: actions/cache@v2
#         with:
#           path: |
#             ~/.gradle/caches
#             ~/.gradle/wrapper
#           key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#           restore-keys: ${{ runner.os }}-gradle-

#       - name: Grant execute permission for gradlew
#         run: chmod +x gradlew

#       - name: Build with Gradle
#         run: ./gradlew build

#       - name: Archive build artifacts
#         uses: actions/upload-artifact@v2
#         with:
#           name: build-artifacts
#           path: build/libs/*.jar

#   docker-build-and-push:
#     runs-on: ubuntu-latest
#     needs: gradle-build
#     services:
#       docker:
#         image: docker:19.03.12
#         options: --privileged
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Download build artifacts
#         uses: actions/download-artifact@v2
#         with:
#           name: build-artifacts

#       - name: Login to DockerHub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1
#         with:
#           region: ${{ secrets.AWS_REGION }}

#       - name: Build and push Docker image using docker-compose
#         run: |
#           docker-compose -f docker-compose.ci.yml build
#           docker tag employee-api:latest ${{ secrets.ECR_REGISTRY }}/employee-api:latest
#           docker tag employee-ui:latest ${{ secrets.ECR_REGISTRY }}/employee-ui:latest
#           docker push ${{ secrets.ECR_REGISTRY }}/employee-api:latest
#           docker push ${{ secrets.ECR_REGISTRY }}/employee-ui:latest
#         env:
#           DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#           DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

#   deploy:
#     runs-on: ubuntu-latest
#     needs: docker-build-and-push
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Setup SSH  
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
#           chmod 700 ~/.ssh/id_rsa
#           eval "$(ssh-agent -s)"
#           ssh-add ~/.ssh/id_rsa
#           ssh-keyscan -H github.com >> ~/.ssh/known_hosts

#       - name: Deploy to ECS 
#         env:
#           AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
#           CI_REGISTRY: ${{ secrets.ECR_REGISTRY }}
#           IMAGE: ${{ secrets.ECR_REGISTRY }}/employee
#         run: |
#           ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_PUBLIC_IP_ADDRESS }} << 'ENDSSH'
#             cd /home/ec2-user/employee-app
#             export \$(cat .env | xargs)
#             aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $CI_REGISTRY
#             docker pull $IMAGE-api:latest
#             docker pull $IMAGE-ui:latest
#             docker-compose -f docker-compose.ci.yml up -d
#             docker system prune -f
#           ENDSSH
