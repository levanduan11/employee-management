name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ secrets.AWS_REGION }}

      - name: Build and push API Docker image
        id: build-and-push-api
        uses: docker/build-push-action@v2
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ secrets.ECR_REGISTRY }}/employee-api:latest

      - name: Build and push UI Docker image
        id: build-and-push-ui
        uses: docker/build-push-action@v2
        with:
          context: ./ui
          file: ./ui/Dockerfile
          push: true
          tags: ${{ secrets.ECR_REGISTRY }}/employee-ui:latest

      - name: Register new task definition
        id: task-def
        uses: aws-actions/amazon-ecs-register-task-definition@v1
        with:
          family: ${{ secrets.ECS_TASK_DEFINITION }}
          container-definitions: |
            [
              {
                "name": "employee-api",
                "image": "${{ secrets.ECR_REGISTRY }}/employee-api:latest",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 8080,
                    "hostPort": 8080
                  }
                ]
              },
              {
                "name": "employee-ui",
                "image": "${{ secrets.ECR_REGISTRY }}/employee-ui:latest",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "hostPort": 3000
                  }
                ]
              }
            ]

      - name: Deploy to ECS
        id: deploy-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          service: ${{ secrets.ECS_SERVICE_NAME }}
          task-definition: ${{ steps.task-def.outputs.task-definition-arn }}
          wait-for-service-stability: true
